#!/usr/bin/env tsx
import fs from 'node:fs'
import path from 'node:path'

const modulesRoot = path.resolve('src/modules')
const outFile = path.join(modulesRoot, 'di.generated.ts')

function toVar(s: string) { return s.replace(/[^a-zA-Z0-9_]/g, '_') }

function scan() {
  const entries = fs.readdirSync(modulesRoot, { withFileTypes: true })
  const mods = entries.filter(e => e.isDirectory() && !e.name.startsWith('.'))
  const imports: string[] = []
  const registrars: string[] = []
  let i = 0
  for (const mod of mods) {
    const modId = mod.name
    const diPath = path.join(modulesRoot, modId, 'di.ts')
    if (fs.existsSync(diPath)) {
      const importName = `D_${toVar(modId)}_${i++}`
      const relImport = `@/modules/${modId}/di`
      imports.push(`import * as ${importName} from '${relImport}'`)
      registrars.push(`${importName}.register`)
    }
  }
  const output = `// AUTO-GENERATED by scripts/generate-module-di.ts
${imports.join('\n')}

export const diRegistrars = [
  ${registrars.join(',\n  ')}
].filter(Boolean) as (((c: any) => void)|undefined)[]
`
  fs.writeFileSync(outFile, output)
}

scan()
console.log('Generated', path.relative(process.cwd(), outFile))

