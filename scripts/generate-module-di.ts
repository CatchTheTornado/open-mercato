#!/usr/bin/env tsx
import fs from 'node:fs'
import path from 'node:path'
import crypto from 'node:crypto'
import { loadEnabledModules, moduleFsRoots, moduleImportBase } from './shared/modules-config'

const outFile = path.resolve('generated/di.generated.ts')
const checksumFile = path.resolve('generated/di.generated.checksum')

function calculateChecksum(content: string): string {
  return crypto.createHash('md5').update(content).digest('hex')
}

function toVar(s: string) { return s.replace(/[^a-zA-Z0-9_]/g, '_') }

function scan() {
  const mods = loadEnabledModules()
  const imports: string[] = []
  const registrars: string[] = []
  let i = 0
  for (const entry of mods) {
    const modId = entry.id
    const roots = moduleFsRoots(entry)
    const imp = moduleImportBase(entry)
    const appDi = path.join(roots.appBase, 'di.ts')
    const pkgDi = path.join(roots.pkgBase, 'di.ts')
    const useApp = fs.existsSync(appDi)
    const usePkg = fs.existsSync(pkgDi)
    const importName = `D_${toVar(modId)}_${i++}`
    if (useApp) {
      imports.push(`import * as ${importName} from '${imp.appBase}/di'`)
      registrars.push(`${importName}.register`)
    } else if (usePkg) {
      imports.push(`import * as ${importName} from '${imp.pkgBase}/di'`)
      registrars.push(`${importName}.register`)
    }
  }
  const output = `// AUTO-GENERATED by scripts/generate-module-di.ts
${imports.join('\n')}

export const diRegistrars = [
  ${registrars.join(',\n  ')}
].filter(Boolean) as (((c: any) => void)|undefined)[]
\nexport default diRegistrars
`
  
  // Check if content has changed
  const newChecksum = calculateChecksum(output)
  let shouldWrite = true
  
  if (fs.existsSync(checksumFile)) {
    const existingChecksum = fs.readFileSync(checksumFile, 'utf8').trim()
    if (existingChecksum === newChecksum) {
      shouldWrite = false
    }
  }
  
  if (shouldWrite) {
    fs.writeFileSync(outFile, output)
    fs.writeFileSync(checksumFile, newChecksum)
    console.log('Generated', path.relative(process.cwd(), outFile))
  }
}

scan()
