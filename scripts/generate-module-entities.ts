#!/usr/bin/env tsx
import fs from 'node:fs'
import path from 'node:path'
import { loadEnabledModules, moduleFsRoots, moduleImportBase } from './shared/modules-config'

const outFile = path.resolve('generated/entities.generated.ts')

function toVar(s: string) {
  return s.replace(/[^a-zA-Z0-9_]/g, '_')
}

function scan() {
  const mods = loadEnabledModules()
  const imports: string[] = []
  const entityRefs: string[] = []
  let n = 0
  for (const entry of mods) {
    const modId = entry.id
    const roots = moduleFsRoots(entry)
    const imp = moduleImportBase(entry)
    // prefer app override data/, fallback to core data/, then legacy db/
    const appData = path.join(roots.appBase, 'data')
    const pkgData = path.join(roots.pkgBase, 'data')
    const appDb = path.join(roots.appBase, 'db')
    const pkgDb = path.join(roots.pkgBase, 'db')
    const bases = [appData, pkgData, appDb, pkgDb]
    const candidates = ['entities.override.ts', 'entities.ts', 'schema.ts']
    let found: { base: string; file: string } | null = null
    for (const base of bases) {
      for (const f of candidates) {
        const p = path.join(base, f)
        if (fs.existsSync(p)) { found = { base, file: f }; break }
      }
      if (found) break
    }
    if (!found) continue
    const importName = `E_${toVar(modId)}_${n++}`
    const sub = path.basename(found.base) // 'data' or 'db'
    const fromApp = found.base.startsWith(roots.appBase)
    const baseImport = fromApp ? imp.appBase : imp.pkgBase
    const relImport = `${baseImport}/${sub}/${found.file.replace(/\.ts$/, '')}`
    imports.push(`import * as ${importName} from '${relImport}'`)
    entityRefs.push(`...Object.values(${importName}).filter(v => typeof v === 'function') as any[]`)
  }
  const output = `// AUTO-GENERATED by scripts/generate-module-entities.ts
${imports.join('\n')}

export const entities = [
  ${entityRefs.join(',\n  ')}
]
`
  fs.writeFileSync(outFile, output)
}

scan()
console.log('Generated', path.relative(process.cwd(), outFile))
